#!/bin/sh

#*****************************************************************************
#* バッチ名：PostgreSQLのデータベースをバックアップする
#* 処理内容：PostgreSQLからpg_dumpコマンドを使用し、dumpファイルを作成する
#*           設定ファイル：backup.conf
#*****************************************************************************

# 設定ファイルの読み込み
. ./backup.conf

#-------------------------------------- 関数群 --------------------------------------
#*****************************************************************************
#* 処 理 名：ファイルが存在するか
#* 引    数：$1 存在を確認するファイル
#* 処理内容：ファイルの存在を確認しファイルが存在しなかった時はファイル作成する
#*****************************************************************************
IsExistsFile() {

    # 引数からファイル名を取得
    targetFile=$1

    # ファイルが存在しなかったらファイルを作成する
    if [ ! -d ${targetFile} ]; then
        echo "ファイル[$targetFile]を作成しました"
        touch $targetFile
    fi

}

#*****************************************************************************
#* 処 理 名：フォルダが存在するか
#* 引    数：$1 存在を確認するフォルダ
#* 処理内容：フォルダの存在を確認しフォルダが存在しなかった時はフォルダ作成する
#*****************************************************************************
IsExistsFolder() {

    # 引数からフォルダ名を取得
    targetFolder=$1

    # フォルダが存在しなかったらフォルダを作成する
    if [ ! -d ${targetFolder} ]; then
        echo "フォルダ[$targetFolder]を作成しました"
        mkdir $targetFolder
    fi

}

#*****************************************************************************
#* 処 理 名：ログに書き込む
#* 引    数：$1 ログに書き込む内容
#* 処理内容：ログファイルにログを書き込む
#*           ログの書き込まれる形式は「[9999/99/99-99:99:99] 書き込まれる内容」
#*           になります
#*****************************************************************************
WriteLog() {

    # 引数からログに書き込む内容を取得
    writeContent=$1

    # コンソールとログファイルに書き込む
    echo [$(date -d '9 hours' +%Y/%m/%d-%H:%M:%S)] $writeContent
    echo [$(date -d '9 hours' +%Y/%m/%d-%H:%M:%S)] $writeContent >> $runLogFile

}

#------------------------------------ メイン処理 ------------------------------------

# バックアップフォルダの作成 ※存在しなかったらフォルダを作成
# 現在日付/実行時間の形式でフォルダが作られます
IsExistsFolder $backupParentFolder
IsExistsFolder $backupChildFolder

# トレースログを作成
# ※シェルによって実行されるすべてのコマンドの標準エラー・ストリームをトレースログに書き込む
exec 2> $traceLogFile

# 実行ログファイルを作成
IsExistsFile $runLogFile

echo

# データベースのバックアップ処理 ※Dumpファイルの作成
# -v：冗長モードを指定します。 詳細なオブジェクトコメント、開始時刻、終了時刻をダンプファイルに、進行状況メッセージを標準エラーに出力
WriteLog "デーベースバックアップ処理の開始"
pg_dump -h $databaseServer -U $databaseLoginUser -d $databaseName -v -f $dumpFile
WriteLog "デーベースバックアップ処理の終了"
